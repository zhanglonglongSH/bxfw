/** 
 * @公司名称: xxxxxxxxxxxx
 * @版权信息: 版权归属15202125130@163.com
 * @包          名: com.lifeinsurancesystem.util.DateUtil
 * @描          述: 日期工具类
 * @作          者: yaojj 
 * @邮          箱: 15202125130@163.com 
 * @创建日期: 2016年4月10日 下午9:54:38 
 * @修改日期: 2016年4月10日 下午9:54:38
 * @版权序号: V0.0.1
 */
package com.lifeinsurancesystem.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * @类 名: DateUtil
 * @描 述: 日期工具类
 * @作 者: yaojj
 * @邮 箱: 15202125130@163.com
 * @创建日期: 2016年6月7日 下午3:21:33
 * @修改日期: 2016年6月7日 下午3:21:33
 */
public class DateUtil {

	public static Map<String, Boolean> tradingDayMap = new HashMap<String, Boolean>();
	public static String startDate = "2013-01-01";
	public static String endDate = "2020-12-31";
	public static String dateFormat = "yyyy-MM-dd HH:mm:ss";

	/**
	 * @方法描述: 日期格式化，字符串日期转换date日期
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param aStrValue
	 * @参数描述: @param aFmtDate
	 * @参数描述: @return
	 * @参数描述: @throws ParseException
	 * @异常处理:
	 */
	public static Date strToDate(String aStrValue, String aFmtDate) throws ParseException {
		Date aDteRtn = Calendar.getInstance().getTime();
		if (aFmtDate.length() == 0) {
			aFmtDate = "yyyyMMddhhmmss";
		}
		SimpleDateFormat fmtDate = new SimpleDateFormat(aFmtDate);

		try {
			aDteRtn.setTime(fmtDate.parse(aStrValue).getTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return aDteRtn;
	}

	/**
	 * @方法描述: 字符日期格式化
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param str
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date stringToDate(String str) {
		Date return_date = null;
		String format = "";
		if (str.length() > 16) {
			format = "yyyy-MM-dd HH:mm:ss";
		} else if (str.length() > 10) {
			format = "yyyy-MM-dd HH:mm";
		} else {
			format = "yyyy-MM-dd";
		}
		try {
			SimpleDateFormat sdf = new SimpleDateFormat(format);
			return_date = sdf.parse(str);
		} catch (ParseException e) {

			e.getMessage();
			return null;
		}
		return return_date;
	}

	/**
	 * @方法描述: date日期转换字符串日期
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param aDteValue
	 * @参数描述: @param aFmtDate
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static String dateToStr(Date aDteValue, String aFmtDate) {
		String strRtn = null;
		if (aFmtDate.length() == 0) {
			aFmtDate = "yyyy-MM-dd";
		}
		SimpleDateFormat fmtDate = new SimpleDateFormat(aFmtDate);
		strRtn = fmtDate.format(aDteValue);
		return strRtn;
	}

	/**
	 * @方法描述: 获取当前日期前一个工作日
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date getThisWeekBegin() {
		Calendar beginTimecal = Calendar.getInstance();
		beginTimecal.set(Calendar.DAY_OF_WEEK, 1);
		beginTimecal.set(Calendar.HOUR_OF_DAY, 0);
		beginTimecal.set(Calendar.MINUTE, 0);
		beginTimecal.set(Calendar.SECOND, 0);
		return beginTimecal.getTime();
	}

	/**
	 * @方法描述: 获取当前日期后一个工作日
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date getLastWeekBegin() {
		Calendar beginTimecal = Calendar.getInstance();
		beginTimecal.set(Calendar.WEEK_OF_MONTH, Calendar.getInstance().get(Calendar.WEEK_OF_MONTH) - 1);
		beginTimecal.set(Calendar.DAY_OF_WEEK, 1);
		beginTimecal.set(Calendar.HOUR_OF_DAY, 0);
		beginTimecal.set(Calendar.MINUTE, 0);
		beginTimecal.set(Calendar.SECOND, 0);
		return beginTimecal.getTime();
	}

	/**
	 * @方法描述: 取得今天的最后一个时刻
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date currentEndDate() {
		return getEndDate(new Date());
	}

	/**
	 * @方法描述: 取得今天的第一个时刻
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date currentStartDate() {
		return getStartDate(new Date());
	}

	/**
	 * @方法描述: 获取某天的起始时间
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param date
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date getStartDate(Date date) {
		if (date == null) {
			return null;
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);
		return cal.getTime();
	}

	/**
	 * @方法描述: 获取某天的结束时间
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param date
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static Date getEndDate(Date date) {
		if (date == null) {
			return null;
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		cal.set(Calendar.MILLISECOND, 999);
		return cal.getTime();
	}
    
	/**
	 * @方法描述: 获取中文工作日
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param date
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static String dateToWeek(String date) {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

		Calendar c = Calendar.getInstance();
		String week = "";
		try {
			c.setTime(format.parse(date));
		} catch (ParseException e) {
			e.printStackTrace();
			return "日期错误";
		}
		switch (c.get(Calendar.DAY_OF_WEEK)) {
		case 1:
			week = "星期日";
			break;
		case 2:
			week = "星期一";
			break;
		case 3:
			week = "星期二";
			break;
		case 4:
			week = "星期三";
			break;
		case 5:
			week = "星期四";
			break;
		case 6:
			week = "星期五";
			break;
		default:
			week = "星期六";
			break;
		}
		return week;
	}

	/**
	 * @Title: getDayDate、
	 * @Description:根据传入的日期计算前几天，后几天
	 * @param date
	 * @param n
	 * @return
	 * @return: String
	 */
	public static String getDayDate(String dateStr, int n) {
		Date date = stringToDate(dateStr);
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DAY_OF_MONTH, n);
		return dateToStr(calendar.getTime(), "yyyy-MM-dd");
	}

	/**
	 * @Title: getDayDate、
	 * @Description:根据传入的日期计算前几天，后几天
	 * @param n
	 * @return
	 * @return: String
	 */
	public static String getDayDate(int n) {
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DAY_OF_MONTH, n);
		return dateToStr(calendar.getTime(), "yyyy-MM-dd");
	}

	/**
	 * @Title: getMinuteDate、
	 * @Description:
	 * @param dateStr
	 * @param n
	 * @return
	 * @return: String
	 */
	public static String getMinuteDate(String dateStr, int n) {
		return getMinuteDate(dateStr, n, "yyyy-MM-dd HH:mm");
	}

	/**
	 * @方法描述: 获取某个时间的前几分钟后几分钟
	 * @作          者: yaojj
	 * @邮          箱: 15202125130@163.com 
	 * @参数描述: @param dateStr
	 * @参数描述: @param n
	 * @参数描述: @param format
	 * @参数描述: @return
	 * @异常处理:
	 */
	public static String getMinuteDate(String dateStr, int n, String format) {
		Date date = stringToDate(dateStr);
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.MINUTE, n);
		return dateToStr(calendar.getTime(), format);
	}

	public static void main(String[] args) {
	}

}
